// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ViveDatabase {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    using ViveDatabase;
    
    
    public partial class EnemySpawnSystemBase : uFrame.ECS.Systems.EcsSystem, uFrame.ECS.APIs.ISystemFixedUpdate {
        
        private IEcsComponentManagerOf<Wands> _WandsManager;
        
        private IEcsComponentManagerOf<Menu> _MenuManager;
        
        private IEcsComponentManagerOf<WandLeft> _WandLeftManager;
        
        private IEcsComponentManagerOf<EnemySpawner> _EnemySpawnerManager;
        
        private IEcsComponentManagerOf<bullet> _bulletManager;
        
        private IEcsComponentManagerOf<Enemy> _EnemyManager;
        
        private IEcsComponentManagerOf<Weapon> _WeaponManager;
        
        private IEcsComponentManagerOf<WandRight> _WandRightManager;
        
        private IEcsComponentManagerOf<Player> _PlayerManager;
        
        public IEcsComponentManagerOf<Wands> WandsManager {
            get {
                return _WandsManager;
            }
            set {
                _WandsManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Menu> MenuManager {
            get {
                return _MenuManager;
            }
            set {
                _MenuManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandLeft> WandLeftManager {
            get {
                return _WandLeftManager;
            }
            set {
                _WandLeftManager = value;
            }
        }
        
        public IEcsComponentManagerOf<EnemySpawner> EnemySpawnerManager {
            get {
                return _EnemySpawnerManager;
            }
            set {
                _EnemySpawnerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<bullet> bulletManager {
            get {
                return _bulletManager;
            }
            set {
                _bulletManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Enemy> EnemyManager {
            get {
                return _EnemyManager;
            }
            set {
                _EnemyManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Weapon> WeaponManager {
            get {
                return _WeaponManager;
            }
            set {
                _WeaponManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WandRight> WandRightManager {
            get {
                return _WandRightManager;
            }
            set {
                _WandRightManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Player> PlayerManager {
            get {
                return _PlayerManager;
            }
            set {
                _PlayerManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            WandsManager = ComponentSystem.RegisterComponent<Wands>(1);
            MenuManager = ComponentSystem.RegisterComponent<Menu>(7);
            WandLeftManager = ComponentSystem.RegisterComponent<WandLeft>(2);
            EnemySpawnerManager = ComponentSystem.RegisterComponent<EnemySpawner>(9);
            bulletManager = ComponentSystem.RegisterComponent<bullet>(4);
            EnemyManager = ComponentSystem.RegisterComponent<Enemy>(10);
            WeaponManager = ComponentSystem.RegisterComponent<Weapon>(8);
            WandRightManager = ComponentSystem.RegisterComponent<WandRight>(3);
            PlayerManager = ComponentSystem.RegisterComponent<Player>(5);
            this.OnEvent<uFrame.Kernel.KernelLoadedEvent>().Subscribe(_=>{ EnemySpawnSystemKernelLoadedFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher>().Subscribe(_=>{ EnemySpawnSystemOnTriggerEnterFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher>().Subscribe(_=>{ EnemySpawnSystemOnTriggerEnterWeaponFilter(_); }).DisposeWith(this);
            this.OnEvent<ViveDatabase.MenuEvent>().Subscribe(_=>{ EnemySpawnSystemMenuEventFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void EnemySpawnSystemKernelLoadedHandler(uFrame.Kernel.KernelLoadedEvent data, EnemySpawner group) {
        }
        
        protected void EnemySpawnSystemKernelLoadedFilter(uFrame.Kernel.KernelLoadedEvent data) {
            var EnemySpawnerItems = EnemySpawnerManager.Components;
            for (var EnemySpawnerIndex = 0
            ; EnemySpawnerIndex < EnemySpawnerItems.Count; EnemySpawnerIndex++
            ) {
                if (!EnemySpawnerItems[EnemySpawnerIndex].Enabled) {
                    continue;
                }
                this.EnemySpawnSystemKernelLoadedHandler(data, EnemySpawnerItems[EnemySpawnerIndex]);
            }
        }
        
        protected virtual void EnemySpawnSystemOnTriggerEnterHandler(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data, bullet collider, Enemy source) {
        }
        
        protected void EnemySpawnSystemOnTriggerEnterFilter(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data) {
            var Colliderbullet = bulletManager[data.ColliderId];
            if (Colliderbullet == null) {
                return;
            }
            if (!Colliderbullet.Enabled) {
                return;
            }
            var SourceEnemy = EnemyManager[data.EntityId];
            if (SourceEnemy == null) {
                return;
            }
            if (!SourceEnemy.Enabled) {
                return;
            }
            this.EnemySpawnSystemOnTriggerEnterHandler(data, Colliderbullet, SourceEnemy);
        }
        
        protected virtual void EnemySpawnSystemFixedUpdateHandler(EnemySpawner group) {
        }
        
        protected void EnemySpawnSystemFixedUpdateFilter() {
            var EnemySpawnerItems = EnemySpawnerManager.Components;
            for (var EnemySpawnerIndex = 0
            ; EnemySpawnerIndex < EnemySpawnerItems.Count; EnemySpawnerIndex++
            ) {
                if (!EnemySpawnerItems[EnemySpawnerIndex].Enabled) {
                    continue;
                }
                this.EnemySpawnSystemFixedUpdateHandler(EnemySpawnerItems[EnemySpawnerIndex]);
            }
        }
        
        public virtual void SystemFixedUpdate() {
            EnemySpawnSystemFixedUpdateFilter();
        }
        
        protected virtual void EnemySpawnSystemOnTriggerEnterWeaponHandler(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data, Weapon collider, WandRight source) {
        }
        
        protected void EnemySpawnSystemOnTriggerEnterWeaponFilter(uFrame.ECS.UnityUtilities.OnTriggerEnterDispatcher data) {
            var ColliderWeapon = WeaponManager[data.ColliderId];
            if (ColliderWeapon == null) {
                return;
            }
            if (!ColliderWeapon.Enabled) {
                return;
            }
            var SourceWandRight = WandRightManager[data.EntityId];
            if (SourceWandRight == null) {
                return;
            }
            if (!SourceWandRight.Enabled) {
                return;
            }
            this.EnemySpawnSystemOnTriggerEnterWeaponHandler(data, ColliderWeapon, SourceWandRight);
        }
        
        protected virtual void EnemySpawnSystemMenuEventHandler(ViveDatabase.MenuEvent data) {
        }
        
        protected void EnemySpawnSystemMenuEventFilter(ViveDatabase.MenuEvent data) {
            this.EnemySpawnSystemMenuEventHandler(data);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("530a1688-8487-4e7c-aae9-34cbd1caea03")]
    public partial class EnemySpawnSystem : EnemySpawnSystemBase {
        
        private static EnemySpawnSystem _Instance;
        
        public EnemySpawnSystem() {
            Instance = this;
        }
        
        public static EnemySpawnSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
